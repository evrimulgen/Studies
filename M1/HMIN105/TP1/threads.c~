#include<stdio.h>
#include<unistd.h> //fork(), getpid(),
#include<sys/types.h> //toutes
#include<sys/wait.h>
#include<stdlib.h>
#include<pthread.h>

struct args_matrice{
  int** matrice;
  int rows;
};

void* lImpair(void* args){
  int res=0;
  int n=(args_matrice*)args->rows;
  for(int i=0;i<n;i++)
    if (i%2 == 1) res++;

  printf("je suis le thread %lu \n",pthread_self());
  return res;
}

void* lPair(void* args){
  int res=0;
  int n=(args_matrice*)args->rows;
  for(int i=0;i<n;i++)
    if (i%2 == 0) res++;

  printf("je suis le thread %lu \n",pthread_self());
  return res;

}  

int main(int argc,char** argv){

  int matrice[5][5]={{1,2,3,4,5},
		     {6,7,8,9,10},
		     {11,12,13,14,15},
		     {16,17,18,19,20},
		     {21,22,23,24,25}  };

  pthread_t idpth1,idpth2;
  struct args_matrice args;
  args->matrice = matrice;
  args->rows=5;
  pthread_create(&idpth1,NULL,lImpair,(void *)&args);
  pthread_create(&idpth1,NULL,lPair,(void *)&args);

  
  return 0;
}
